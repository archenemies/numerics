https://chatgpt.com/

--- pack.R.orig	2025-05-10 00:00:00.000000000 +0000
+++ pack.R	2025-05-10 12:30:00.000000000 +0000
@@ -17,7 +17,93 @@
 ibind = function(dim=NULL, ...) {
-  # XXX
+  args = list(...)
+  if (is.null(dim)) stop("dimension must be specified")
+  if (is.null(names(args)) || any(names(args) == "")) stop("all arguments must be named")
+
+  args = lapply(args, iprep)
+
+  ref_dims = dim(args[[1]])
+  n_dims = length(ref_dims)
+  if (dim > n_dims) stop("specified dim exceeds number of dimensions")
+
+  for (a in args) {
+    da = dim(a)
+    if (length(da) != n_dims) stop("all arguments must have same number of dimensions")
+    if (!all(da[-dim] == ref_dims[-dim])) stop("non-binding dimensions must match")
+  }
+
+  # calculate final dimension sizes
+  bind_sizes = sapply(args, function(x) dim(x)[dim])
+  out_dims = ref_dims
+  out_dims[dim] = sum(bind_sizes)
+
+  # allocate result
+  first = args[[1]]
+  out = array(NA, dim=out_dims)
+  storage.mode(out) = storage.mode(first)
+
+  # fill result
+  start = 1
+  for (i in seq_along(args)) {
+    a = args[[i]]
+    len = dim(a)[dim]
+    end = start + len - 1
+    idx = vector("list", n_dims)
+    for (j in seq_len(n_dims)) {
+      if (j == dim) {
+        idx[[j]] = start:end
+      } else {
+        idx[[j]] = seq_len(dim(a)[j])
+      }
+    }
+    out_idx = idx
+    out_idx[[dim]] = start:end
+    out = do.call(`[<-`, c(list(out), out_idx, list(value=a)))
+    start = end + 1
+  }
+
+  # handle dimnames
+  dnames = vector("list", n_dims)
+  if (!is.null(dimnames(first))) {
+    for (d in seq_len(n_dims)) {
+      if (d == dim) {
+        dnames[[d]] = unlist(Map(function(name, x) {
+          dn = dimnames(x)[[d]]
+          if (is.null(dn)) paste0(name, "$", seq_len(dim(x)[d]))
+          else paste0(name, "$", dn)
+        }, names(args), args), use.names=FALSE)
+      } else {
+        dnames[[d]] = dimnames(first)[[d]]
+      }
+    }
+  }
+  dimnames(out) = dnames
+
+  # dimindices
+  indices = vector("list", n_dims)
+  for (d in seq_len(n_dims)) {
+    if (d == dim) {
+      indices[[d]] = list()
+      start = 1
+      for (nm in names(args)) {
+        obj = args[[nm]]
+        len = dim(obj)[d]
+        indices[[d]][[nm]] = start %upto% (start + len - 1)
+        obj_indices = attr(obj, "dimindices")[[d]]
+        if (!is.null(obj_indices)) {
+          for (subnm in names(obj_indices)) {
+            indices[[d]][[paste0(nm, "$", subnm)]] = start - 1 + obj_indices[[subnm]]
+          }
+        }
+        start = start + len
+      }
+    } else {
+      indices[[d]] = attr(first, "dimindices")[[d]]
+    }
+  }
+  attr(out, "dimindices") = indices
+  out
 }

 # iprep "prepare index"
 # Sets "dimindices" attribute from dimnames()
 iprep = function(obj) {
-  # XXX
+  dn = dimnames(obj)
+  d = dim(obj)
+  indices = vector("list", length(d))
+  for (i in seq_along(d)) {
+    if (!is.null(dn[[i]])) {
+      indices[[i]] = setNames(as.list(seq_len(d[[i]])), dn[[i]])
+    } else {
+      indices[[i]] = NULL
+    }
+  }
+  attr(obj, "dimindices") = indices
+  obj
 }

 # ifetch(u, "a", dim=1)
 # ifetch(u, "b$x")
 # Subscript the given object with the named indices along the specified dimension.
 # Error if named indices don't exist.
 ifetch = function(obj, ixkey, dim=NULL) {
-  # XXX
+  indices = attr(obj, "dimindices")
+  if (is.null(dim)) {
+    found = which(sapply(indices, function(idx) !is.null(idx) && ixkey %in% names(idx)))
+    if (length(found) != 1) stop("ambiguous or missing dimension for index key")
+    dim = found
+  }
+  if (is.null(indices[[dim]])) stop("no indices found for dimension ", dim)
+  ix = indices[[dim]][[ixkey]]
+  if (is.null(ix)) stop("index key not found: ", ixkey)
+  idx = vector("list", length(dim(obj)))
+  for (i in seq_along(idx)) idx[[i]] = seq_len(dim(obj)[i])
+  idx[[dim]] = ix
+  do.call(`[`, c(list(obj), idx, drop=FALSE))
 }
